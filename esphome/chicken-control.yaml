esphome:
  name: chicken-control

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: "wVsdpJYDZOLiceUaprwcPIzr5Wak3djH3w9cU/U1uYc="

ota:
  password: "c5f3779a81a558e122d240c83cfcaf77"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Chicken-Control Fallback Hotspot"
    password: "d6QbQkytYKRa"

captive_portal:

i2c:
  sda: GPIO21
  scl: GPIO22

output:
  - id: led_stripe_output
    platform: gpio
    pin: GPIO14
  - id: led_green_output
    platform: gpio
    pin: GPIO23
  - id: led_red_output
    platform: gpio
    pin: GPIO05
  - platform: gpio
    pin: GPIO17
    id: sh_direction_pin1
    inverted: true
  - platform: gpio
    pin: GPIO25
    id: sh_direction_pin2
    inverted: true
  - platform: esp32_dac
    pin: 26
    min_power: 0.1
    max_power: 1.0
    id: sh_speed_pin

light:
  - platform: binary
    id: led_green
    name: "LED green"
    output: led_green_output
  - platform: binary
    id: led_red
    name: "LED red"
    output: led_red_output
  - platform: binary
    id: led_stripe
    name: "LED-Streifen"
    output: led_stripe_output

binary_sensor:
  - platform: gpio
    device_class: power
    name: Kontakt unten
    id: door_closed
    pin:
      number: 19
      mode: 
        input: True
        pullup: True
      inverted: True
    filters:
      - delayed_on_off: 10ms
    on_press:
      then:
        - light.turn_on: led_green
        - light.turn_off: led_red
    on_release:
      then:
        - light.turn_on: led_red
        - light.turn_off: led_green
#    templates:
#      icon_color: >
#        if (state === 'on') return 'rgb(192, 39, 30)';
#        return 'rgb(54, 95, 140)';
#      icon: >
#        if (state === 'on') return 'mdi:run-fast';
#        return 'mdi:security-home';

  - platform: gpio
    device_class: power
    id: door_open
    name: Kontakt oben
    pin:
      number: 18
      mode: 
        input: True
        pullup: True
      inverted: True
    filters:
      - delayed_on_off: 10ms

cover:
  - platform: endstop
    device_class: garage
    name: "Motor Huehnerklappe"
    id: motor_huehnerklappe
    open_duration: 30sec
    close_duration: 30sec
    open_endstop: door_open
    close_endstop: door_closed
    max_duration: 2min
    open_action:
      - output.set_level: 
          id: sh_speed_pin
          level: 50%
      - output.turn_on: sh_direction_pin2
      - output.turn_on: sh_speed_pin

    close_action:
      - output.set_level: 
          id: sh_speed_pin
          level: 50%
      - output.turn_on: sh_direction_pin1
      - output.turn_on: sh_speed_pin

    stop_action:
      - output.turn_off: sh_direction_pin1
      - output.turn_off: sh_direction_pin2
      - output.turn_off: sh_speed_pin

sensor:
  - platform: bme280
    temperature:
      name: "Temperatur CK"
      id: bme280_temperature
    pressure:
      name: "Pressure CK"
      id: bme280_pressure
    humidity:
      name: "Relative Humidity"
      id: bme280_humidity
    address: 0x76
    update_interval: 240s
  - platform: template
    name: "Altitude CK"
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(bme280_temperature).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure).state), 0.190234) - 1); // in meter
    update_interval: 30s
    icon: 'mdi:signal'
    unit_of_measurement: 'm'
  - platform: template
    name: "Absolute Humidity CK"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) /
        (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) /
        ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 30s
    icon: 'mdi:water'
    unit_of_measurement: 'g/m³'
  - platform: template
    name: "Dew Point CK"
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: °C
    icon: 'mdi:thermometer-alert'
       